{"version":3,"sources":["./src/environments/environment.ts","./src/app/data/interfaces/IMockData.ts","./src/app/core/View.ts","./src/app/core/graphics/Train.graphic.ts","./src/app/core/World.ts","./src/app/data/DataAdapter.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/services/mock-data.service.ts","./src/app/app.module.ts","./src/app/data/Style.ts","./src/app/engine/engine.service.ts","./src/app/data/AbstractPropertyModel.ts","./src/app/core/graphics/DirectionPlan.graphic.ts","./src/app/core/SelectiveBloomEngine.ts","./src/app/core/graphics/Track.graphic.ts","./src/app/core/graphics/interfaces/IFresnelShader.ts","./src/app/engine/engine.common.ts","./src/app/core/graphics/Tunnel.graphic.ts","./src/app/core/graphics/GangZ.graphic.ts","./src/app/core/ViewerFactory.ts","./src/app/core/Viewer.ts","./src/app/app-routing.module.ts","./src/app/core/graphics/SkyBox.graphic.ts","./src/app/core/MainGroup.ts","./src/main.ts","./src/app/core/graphics/Galaxy.graphic.ts","./$_lazy_route_resource lazy namespace object","./src/app/core/graphics/Abstract.graphic.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","export enum TunnelType {\n    NORMAL = 'NORMAL',\n    UNDER = 'UNDER',\n}\n\nexport interface ITunnelDesc {\n    name: string;\n    type: TunnelType;\n    length: number;\n    bodyID: number;\n    bodyOD: number;\n    startAt: number;\n    settings?: {\n        color: string;\n        opacity: number;\n        isIsometricMode: boolean;\n        tunnelColor: number | string;\n    }\n}\n\nexport interface ITrajectoryDesc {\n    trajectoryX: number[];\n    trajectoryY: number[];\n    trajectoryZ: number[];\n}\n\nexport interface IMockData {\n    trajectory: ITrajectoryDesc;\n    tunnel: ITunnelDesc[];\n    gangzList?: IGangZData[];\n}\n\nexport interface Engine3DPoint {\n    x: number;\n    y: number;\n    z: number;\n}\nexport interface IGangZData {\n    objPath: string;\n    mtlPath?: string;\n    scale: number;\n    count: number;\n    rotation: Engine3DPoint;\n    data: {\n        position?: Engine3DPoint,\n        range?: Engine3DPoint\n    }\n}","import { AmbientLight, Camera, DirectionalLight, Scene, Vector3, WebGLRenderer } from \"three\";\nimport { IView } from \"./interfaces/IView\";\nimport { IWorld } from \"./interfaces/IWorld\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { SelectiveBloomEngine } from \"./SelectiveBloomEngine\";\n\nexport class View implements IView {\n    IView: string = 'IView';\n\n    private dirty: boolean = false;\n    private fov: number = 45;\n    private canvas!: HTMLCanvasElement;\n    private scene!: Scene;\n    private camera!: THREE.PerspectiveCamera;\n    private renderer!: WebGLRenderer;\n    private controls!: OrbitControls;\n\n    private world!: IWorld;\n    private directionalLight!: any;\n    private bloomEngine!: SelectiveBloomEngine;\n   \n    constructor(canvas: string) {\n        this.canvas = <HTMLCanvasElement>document.querySelector(canvas);\n        this.setupScene();\n        this.setupCamera();\n        this.setupRenderer();\n        this.setupControl();\n        this.setupLights();\n        this.setupBloomEngine();\n    }\n\n    getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    setCameraPosition(value: Vector3): void {\n        this.camera.position.set(value.x, value.y, value.z);\n    }\n\n    getCameraPosition(): Vector3 {\n        return this.camera.position;\n    }\n\n    setWorld(world: IWorld): void {\n        this.world = world;\n        this.world.getMainGroup().setScene(this.scene);\n    }\n\n    reset(): void {\n        // do nothing\n    }\n\n    setCenterView(point: Vector3): void {\n        this.controls.target.set(point.x, point.y, point.z);\n    }\n\n    render(): void {\n        // first, clear dirty flag\n        this.dirty = false;\n\n        this.onResize();\n\n        const wd = this.camera.getWorldDirection(new THREE.Vector3());\n        this.directionalLight.position.set(-wd.x, -wd.y, -wd.z);\n        this.world.drawBegin(this);\n\n        // draw(): render the world\n        this.renderer.clear();\n        this.renderer.render(this.scene, this.camera);\n\n        // render bloom effects\n        this.bloomEngine.render(this.scene, this.camera);\n\n        // drawEnd()\n        this.world.drawEnd(this);\n    }\n\n    isDirty(): boolean {\n        return this.dirty;\n    }\n\n    getCamera() {\n        return this.camera;\n    }\n\n    getClientWidth(): number {\n        return this.renderer.domElement.clientWidth;\n    }\n\n    getClientHeight(): number {\n        return this.renderer.domElement.clientHeight;\n    }\n\n    private onResize() {\n        if (this.resizeRendererToDisplaySize(this.renderer)) {\n            console.log('resize');\n            const canvas = this.renderer.domElement;\n            this.camera.aspect = canvas.clientWidth / canvas.clientHeight;\n            this.camera.updateProjectionMatrix();\n            this.bloomEngine.setSize(canvas.clientWidth, canvas.clientHeight);\n        }\n    }\n\n    private resizeRendererToDisplaySize(renderer: WebGLRenderer) {\n        const canvas = renderer.domElement;\n        const pixelRatio = window.devicePixelRatio;\n        const width = canvas.clientWidth * pixelRatio | 0;\n        const height = canvas.clientHeight * pixelRatio | 0;\n        const needResize = canvas.width !== width || canvas.height !== height;\n        if (needResize) {\n            renderer.setSize(width, height, false);\n        }\n        return needResize;\n    }\n\n    private readonly setupScene = (): void => {\n        this.scene = new Scene();\n        this.scene.background = new THREE.Color(0x000000);\n    }\n\n    private readonly setupCamera = () => {\n        this.camera = new THREE.PerspectiveCamera(\n            this.fov,\n            window.innerWidth / window.innerHeight,\n            0.1,\n            20000\n        );\n        this.camera.position.x = -5;\n        this.camera.position.y = 5;\n        this.camera.position.z = 5;\n        this.camera.zoom = 0.5;\n    }\n\n    private readonly setupRenderer = () => {\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            antialias: true,\n            powerPreference: 'high-performance'\n        });\n        this.renderer.render(this.scene, this.camera);\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    private readonly setupControl = () => {\n        this.controls = new OrbitControls(this.camera, this.canvas);\n        this.controls.target.set(0, 0, 0);\n        this.controls.maxDistance = 300;\n        this.controls.update();\n    }\n\n    private readonly setupLights = (): void => {\n        const lights = new THREE.AmbientLight(0xB1E1FF, 0.7);\n        this.scene.add(lights);\n\n        this.directionalLight = new THREE.DirectionalLight(0xFFFFFF, 1);\n        this.scene.add(this.directionalLight);\n    }\n\n    private setupBloomEngine = () => {\n        this.bloomEngine = new SelectiveBloomEngine(this);\n        this.bloomEngine.setupEngine(this.renderer, this.scene, this.camera);\n    }\n}","import { AbstractGraphic } from \"./Abstract.graphic\";\nimport * as THREE from \"three\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\nimport { CatmullRomCurve3, MeshStandardMaterial, Vector3 } from \"three\";\nimport { IPropertyChangeListener } from \"src/app/data/interfaces/IPropertyChangeListener\";\nimport { IStyle } from \"src/app/data/interfaces/IStyle\";\nimport { Style } from \"src/app/data/Style\";\nimport { Flow } from \"three/examples/jsm/modifiers/CurveModifier.js\";\nimport { IView } from \"../interfaces/IView\";\nimport { MTLLoader } from \"three/examples/jsm/loaders/MTLLoader\";\n\nexport class TrainGraphic extends AbstractGraphic implements IPropertyChangeListener {\n    public IPropertyChangeListener = 'TrainGraphic';\n\n    private trainModel!: THREE.Object3D;\n    private train!: Flow;\n    private style!: IStyle;\n    private path!: CatmullRomCurve3;\n    private flowSteps!: number;\n\n    constructor(trajectory: Vector3[]) {\n        super();\n        this.trainModel = new THREE.Object3D();\n\n        this.setStyle();\n        this.path = new THREE.CatmullRomCurve3(trajectory);\n        this.flowSteps = Math.round(Math.round(this.path.getLength()) * 2);\n        this.loadModelAsync();\n    }\n\n    private readonly setStyle = () => {\n        this.style = new Style();\n        this.style.addPropertyChangeListener(this);\n    }\n\n    public getStyle(): IStyle {\n        return this.style;\n    }\n\n    drawBegin(view: IView): void {\n        if (this.train) {\n            this.train.moveAlongCurve(1 / this.flowSteps);\n        }\n    }\n\n    public onPropertyChange(property: string, oldValue: any, newValue: any, object: any): void | Promise<void> {\n    }\n\n    private readonly loadModelAsync = () => {\n        const loader = new MTLLoader();\n        loader.load('assets/models/electrictrain.mtl', (material) => {\n            material.preload();\n            const objLoader = new OBJLoader();\n            objLoader.setMaterials(material);\n\n            objLoader.load('assets/models/electrictrain.obj', (model) => {\n                model.traverse(function (child) {\n                    if (child instanceof THREE.Mesh && child.material as MeshStandardMaterial) {\n                        child.material.side = THREE.DoubleSide;\n                    }\n                });\n                if (model.children && model.children[0]) {\n                    const modelNode = model.children[0] as THREE.Mesh;\n                    modelNode.geometry.scale(0.25, 0.15, 0.1);\n                    modelNode.geometry.rotateX(Math.PI * .5);\n                    modelNode.geometry.rotateY(Math.PI);\n                    modelNode.geometry.rotateZ(Math.PI * .5);\n                }\n                this.trainModel = model;\n                const trainModelCoor = new THREE.Box3().setFromObject(this.trainModel);\n                this.setModelPosition(trainModelCoor.max.x - trainModelCoor.min.x);\n            });\n        });\n    }\n\n    private setModelPosition = (start: number) => {\n        if (this.train) {\n            this.train.updateCurve(0, this.path);\n            this.train.uniforms.spineOffset.value = (start / 2); // to do: not hard code - BUG\n        } else {\n            this.train = new Flow(this.trainModel as any, this.flowSteps);\n            this.train.updateCurve(0, this.path);\n            this.train.uniforms.spineOffset.value = (start / 2); // to do: not hard code\n            this.getNode().add(this.train.object3D);\n        }\n    }\n\n}","import { IGroup } from \"./interfaces/IGroup\";\nimport { IView } from \"./interfaces/IView\";\nimport { IViewer } from \"./interfaces/IViewer\";\nimport { IWorld } from \"./interfaces/IWorld\";\nimport { MainGroup } from \"./MainGroup\";\n\nexport class World implements IWorld {\n    IWorld: string = 'IWorld';\n\n    private group!: IGroup;\n    private viewer: IViewer;\n\n    constructor(viewer: IViewer) {\n        this.viewer = viewer;\n        this.setupMainGroup();\n    }\n\n    public getMainGroup(): IGroup {\n        return this.group;\n    }\n\n    drawBegin(view: IView): void {\n        this.getMainGroup().getChildNodes().forEach(node => {\n            node.drawBegin(view);\n        });\n    }\n\n    drawEnd(view: IView): void {\n        this.getMainGroup().getChildNodes().forEach(node => {\n            node.drawEnd(view);\n        });\n    }\n\n    private readonly setupMainGroup = () => {\n        this.group = new MainGroup();\n    }\n\n}","import { Vector3 } from \"three\";\nimport { IDataAdapter } from \"./interfaces/IDataAdapter\";\nimport { ITrajectoryDesc } from \"./interfaces/IMockData\";\nimport * as THREE from \"three\";\n\nexport class DataAdapter implements IDataAdapter {\n    private trajectoryX!: number[];\n    private trajectoryY!: number[];\n    private trajectoryZ!: number[];\n    private trajectory!: Vector3[];\n\n    constructor(data: ITrajectoryDesc) {\n        this.trajectory = new Array<Vector3>();\n        this.trajectoryX = data.trajectoryX;\n        this.trajectoryY = data.trajectoryY;\n        this.trajectoryZ = data.trajectoryZ;\n        this.computeTrajectory();\n        console.log('DataAdapter length = ', this.getLength());\n    }\n\n    getLength(): number {\n        return new THREE.CatmullRomCurve3(this.trajectory).getLength();\n    }\n\n    getTrajectory(): Vector3[] {\n        return this.trajectory;\n    }\n\n    private readonly computeTrajectory = () => {\n        const length = Math.min(this.trajectoryX.length, this.trajectoryY.length, this.trajectoryZ.length);\n        if (length === 0) {\n            this.trajectory.push(new Vector3(0, 0, 0));\n        } else {\n            for (let i = 0; i < length; i++) {\n                this.trajectory.push(new Vector3(this.trajectoryX[i], this.trajectoryY[i], this.trajectoryZ[i]));\n            }\n        }\n    }\n\n}","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { EngineService } from './engine/engine.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'Train3D';\n\n  @ViewChild('canvas', { static: true })\n  public canvas!: ElementRef<HTMLCanvasElement>;\n\n  constructor(private engineService: EngineService) { }\n\n  ngOnInit(): void {\n    // create scene of rendering and progress\n    this.engineService.createScene(this.canvas);\n  }\n}\n","<canvas #canvas id=\"canvas\"></canvas>\n<router-outlet></router-outlet>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { IGangZData, IMockData, ITrajectoryDesc, ITunnelDesc } from '../data/interfaces/IMockData';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MockDataService {\n\n  private tunnel!: Subject<ITunnelDesc[]>;\n  private trajectory!: Subject<ITrajectoryDesc>;\n  private gangzList!: Subject<IGangZData[]>;\n\n  constructor(private httpClient: HttpClient) {\n    this.trajectory = new Subject<ITrajectoryDesc>();\n    this.tunnel = new Subject<ITunnelDesc[]>();\n    this.gangzList = new Subject<IGangZData[]>();\n\n    this.httpClient.get<IMockData>('assets/mock-data.json').subscribe((data: IMockData) => {\n      console.log(\"data json from MockDataService \", data);\n      this.trajectory.next(data.trajectory);\n      this.tunnel.next(data.tunnel);\n      this.gangzList.next(data.gangzList);\n    })\n  }\n\n  public getTrajectory(): Observable<ITrajectoryDesc> {\n    return this.trajectory.asObservable();\n  }\n\n  public getListOfGangZ(): Observable<IGangZData[]> {\n    return this.gangzList.asObservable();\n  }\n\n  public getTunnel(): Observable<ITunnelDesc[]> {\n    return this.tunnel.asObservable();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from \"@angular/common/http\";\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Color } from \"three\";\nimport { AbstractPropertyModel } from \"./AbstractPropertyModel\";\nimport { IPropertyChangeListener } from \"./interfaces/IPropertyChangeListener\";\nimport { IStyle } from \"./interfaces/IStyle\";\nimport * as THREE from \"three\";\n\nexport enum StyleProperty {\n    SINGLE_COLOR = 'SINGLE_COLOR',\n    OPACITY = 'OPACITY'\n}\n\nexport class Style extends AbstractPropertyModel implements IStyle {\n    public IStyle: string = \"IStyle\";\n    private color!: Color;\n    private opacity!: number;\n\n    constructor(listener?: IPropertyChangeListener) {\n        super(listener);\n        this.color = new THREE.Color(0x0000ff);\n        this.opacity = 1;\n    }\n\n    getColor(): Color {\n        return this.color;\n    }\n\n    setColor(color: Color): void {\n        const oldValue = this.color;\n        this.color = color;\n        this.firePropertyChange(StyleProperty.SINGLE_COLOR, oldValue, color, this);\n    }\n\n    getOpacity(): number {\n        return this.opacity;\n    }\n\n    setOpacity(opacity: number): void {\n        const oldValue = this.opacity;\n        this.opacity = opacity;\n        this.firePropertyChange(StyleProperty.OPACITY, oldValue, opacity, this);\n    }\n\n    public getPropertyNames(): string[] {\n        return Object.values(StyleProperty);\n    }\n\n    public getPropertyValue(property: string): any {\n        switch (property) {\n            case StyleProperty.SINGLE_COLOR:\n                return this.getColor();\n            case StyleProperty.OPACITY:\n                return this.getOpacity();\n        }\n    }\n}","import { ElementRef, Injectable } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DirectionPlanGraphic } from '../core/graphics/DirectionPlan.graphic';\nimport { GalaxyGraphic } from '../core/graphics/Galaxy.graphic';\nimport { SkyBoxGraphic } from '../core/graphics/SkyBox.graphic';\nimport { TrainGraphic } from '../core/graphics/Train.graphic';\nimport { IGroup } from '../core/interfaces/IGroup';\nimport { IViewer } from '../core/interfaces/IViewer';\nimport { DataAdapter } from '../data/DataAdapter';\nimport { IDataAdapter } from '../data/interfaces/IDataAdapter';\nimport { IGangZData, ITrajectoryDesc, ITunnelDesc, TunnelType } from '../data/interfaces/IMockData';\nimport { MockDataService } from '../services/mock-data.service';\nimport { EngineCommon } from './engine.common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EngineService {\n  private canvasElement!: ElementRef<HTMLCanvasElement>;\n  private viewer: IViewer | undefined;\n  private mainGroup!: IGroup;\n  private dataAdapter!: IDataAdapter;\n  private subscriptions: Subscription[] = [];\n\n  constructor(private mockData: MockDataService) { }\n\n  public createScene(canvasElement: ElementRef<HTMLCanvasElement>): void {\n    this.canvasElement = canvasElement;\n\n    EngineCommon.createViewer(this.canvasElement).then((viewer: IViewer) => {\n      this.viewer = viewer;\n      this.mainGroup = viewer.getWorld().getMainGroup();\n      \n      this.loadSkyBox();\n\n      this.mockData.getTrajectory().subscribe((trajectory: ITrajectoryDesc) => {\n        this.dataAdapter = new DataAdapter(trajectory);\n        const directionPlanGraphic = new DirectionPlanGraphic(this.dataAdapter);\n        this.mainGroup.addNode(directionPlanGraphic);\n\n        // create train track graphic\n        const trackGraphic = EngineCommon.createTrack(this.dataAdapter.getTrajectory());\n        this.mainGroup.addNode(trackGraphic);\n\n        // create train model graphic\n        const trainGraphic = new TrainGraphic(this.dataAdapter.getTrajectory());\n        this.mainGroup.addNode(trainGraphic);\n      });\n\n      this.mockData.getTunnel().subscribe((tunnels: ITunnelDesc[]) => {\n        tunnels.forEach((tunnel: ITunnelDesc) => {\n          const tunnelGraphic = EngineCommon.createTunnel(tunnel, this.dataAdapter.getTrajectory());\n          if (tunnel.type === TunnelType.UNDER) {\n            tunnelGraphic.getStyle().setOpacity(0.5);\n          }\n          this.mainGroup.addNode(tunnelGraphic);\n        });\n      });\n\n      this.loadListOfGangZ();\n    });\n  }\n\n  private loadSkyBox = () => {\n    const skybox = new SkyBoxGraphic('purplenebula');\n    this.mainGroup.addNode(skybox);\n    \n    const galaxy = new GalaxyGraphic();\n    this.mainGroup.addNode(galaxy);\n  }\n\n  private loadListOfGangZ = () => {\n    const subscription = this.mockData.getListOfGangZ().subscribe((gangs: IGangZData[]) => {\n      gangs.forEach((gang: IGangZData) => {\n        const gangzGraphic = EngineCommon.createGangZ(gang);\n        this.mainGroup.addNode(gangzGraphic);\n      });\n    });\n\n    this.subscriptions.push(subscription);\n  } \n}\n","import { IPropertyChangeListener } from \"./interfaces/IPropertyChangeListener\";\nimport { IPropertyModel } from \"./interfaces/IPropertyModel\";\n\nexport abstract class AbstractPropertyModel implements IPropertyModel {\n    public IPropertyModel = 'AbstractPropertyModel';\n\n    private specializedListeners: IPropertyChangeListener[][] = [];\n\n    private globalListeners: IPropertyChangeListener[] = [];\n\n    protected constructor(listener?: IPropertyChangeListener) {\n        if (listener) {\n            this.globalListeners.push(listener);\n        }\n    }\n\n    public addPropertyChangeListener(listener: IPropertyChangeListener, property?: string): void {\n        if (!property) {\n            if (this.globalListeners.indexOf(listener) < 0) {\n                this.globalListeners.push(listener);\n            }\n        } else if (this.hasProperty(property)) {\n            if (this.specializedListeners[property as any] === undefined) {\n                this.specializedListeners[property as any] = [];\n            }\n            const propertyListeners = this.specializedListeners[property as any];\n            if (propertyListeners.indexOf(listener) < 0) {\n                propertyListeners.push(listener);\n            }\n        } else {\n            throw new Error(`Object ${this} doesn't contain the property '${property}'`);\n        }\n    }\n\n    public removePropertyChangeListener(listener: IPropertyChangeListener, property?: string): void {\n        if (!property) {\n            const id = this.globalListeners.indexOf(listener);\n            if (id >= 0) {\n                this.globalListeners.splice(id, 1);\n            }\n        } else if (this.hasProperty(property)) {\n            const propertyListeners = this.specializedListeners[property as any];\n            if (propertyListeners !== undefined) {\n                const id = propertyListeners.indexOf(listener);\n                if (id >= 0) {\n                    propertyListeners.splice(id, 1);\n                }\n            }\n        }\n    }\n\n    public hasProperty(property: string): boolean {\n        const properties = this.getPropertyNames();\n        return properties.indexOf(property) >= 0;\n    }\n\n    public abstract getPropertyNames(): string[];\n\n    public abstract getPropertyValue(property: string): any;\n\n    public async firePropertyChange(property: string, oldValue: any, newValue: any, object: any): Promise<void> {\n        const responses = this.globalListeners.map(\n            async (listener: IPropertyChangeListener) => {\n                await listener.onPropertyChange(property, oldValue, newValue, object);\n            }\n        );\n        const specListenersResponses = this.specializedListeners.map(\n            async (specListener: IPropertyChangeListener[]) => {\n                const listenerResponses = specListener.map(\n                    async (listener: IPropertyChangeListener) => {\n                        await listener.onPropertyChange(property, oldValue, newValue, object);\n                    }\n                );\n                await Promise.all(listenerResponses);\n            }\n        );\n\n        await Promise.all(responses);\n        await Promise.all(specListenersResponses);\n        return Promise.resolve();\n    }\n}","import { AbstractGraphic } from \"./Abstract.graphic\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport { IDataAdapter } from \"src/app/data/interfaces/IDataAdapter\";\n\nexport class DirectionPlanGraphic extends AbstractGraphic {\n    private trajectory!: Vector3[];\n    private directionPlan!: THREE.Mesh;\n\n    constructor(dataAdapter: IDataAdapter) {\n        super();\n        this.trajectory = dataAdapter.getTrajectory();\n        this.build(this.trajectory);\n        this.getNode().add(this.directionPlan);\n\n        // const axesHelper = new THREE.AxesHelper( 10 );\n        // this.getNode().add( axesHelper );\n    }\n\n    private readonly build = (trajectory: Vector3[]) => {\n        const path = new THREE.CatmullRomCurve3(trajectory);\n        const tubularSegment = Math.round(path.getLength()) * 2;\n        const geometry = new THREE.TubeGeometry(path, tubularSegment, 0.01, 64, true);\n        const material = new THREE.MeshStandardMaterial({\n            color: new THREE.Color(0x0000ff),\n            side: THREE.DoubleSide,\n            opacity: 1\n        });\n        this.directionPlan = new THREE.Mesh(geometry, material);\n    }\n}","import { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer.js\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass.js\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass.js\";\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass\";\nimport * as THREE from \"three\";\nimport { IView } from \"./interfaces/IView\";\n\nexport class SelectiveBloomEngine {\n    \n    private readonly ENTIRE_SCENE = 0;\n    private readonly BLOOM_SCENE = 1;\n    private readonly bloomLayer = new THREE.Layers();\n    private readonly darkMaterial = new THREE.MeshBasicMaterial({ color: 'black' });\n\n    private materials: any = {};\n    private bloomComposer!: EffectComposer;\n    private finalComposer!: EffectComposer;\n    private view: IView;\n\n    constructor(view: IView) {\n        this.view = view;\n    }\n\n    public readonly setupEngine = (renderer: THREE.WebGLRenderer, scene: THREE.Scene, camera: THREE.Camera) => {\n        this.bloomLayer.set(this.BLOOM_SCENE);\n\n        const renderScene = new RenderPass(scene, camera);\n        const bloomPass = this.buildBloomPass();\n        \n        this.bloomComposer = new EffectComposer(renderer);\n        // this.bloomComposer.setSize(window.innerWidth, window.innerHeight);\n        this.bloomComposer.renderToScreen = false;\n        this.bloomComposer.addPass(renderScene);\n        this.bloomComposer.addPass(bloomPass);\n        \n        const finalPass = this.buildFinalPass(this.bloomComposer);\n        \n        this.finalComposer = new EffectComposer(renderer);\n        this.finalComposer.addPass(renderScene);\n        this.finalComposer.addPass(finalPass);\n    }\n\n    public readonly render = (scene: THREE.Scene, camera: THREE.Camera, mask = true) => {\n        if (mask === true) {\n            scene.traverse(this.darkenNonBloomed);\n            this.bloomComposer.render();\n            scene.traverse(this.restoreMaterial);\n        } else {\n            camera.layers.set(this.BLOOM_SCENE);\n            this.bloomComposer.render();\n            camera.layers.set(this.ENTIRE_SCENE);\n        }\n        this.finalComposer.render();\n    }\n\n    public readonly setSize = (innerWidth: number, innerHeight: number) => {\n        this.bloomComposer.setSize(innerWidth, innerHeight);\n        this.finalComposer.setSize(innerWidth, innerHeight);\n    }\n\n    private buildBloomPass = () => {\n        const bloomPass = new UnrealBloomPass(\n            new THREE.Vector2(window.innerWidth, window.innerHeight),\n            1.5,\n            0.4,\n            0.85\n        );\n        bloomPass.threshold = 0;\n        bloomPass.strength = 2; //intensity of glow\n        bloomPass.radius = 0;\n\n        return bloomPass;\n    }\n\n    private buildFinalPass = (bloomComposer: EffectComposer) => {\n        const finalPass = new ShaderPass(\n            new THREE.ShaderMaterial({\n                uniforms: {\n                    baseTexture: { value: null },\n                    bloomTexture: { value: bloomComposer.renderTarget2.texture }\n                },\n                vertexShader: this.getVertexShader(),\n                fragmentShader: this.getFragmentShader(),\n                defines: {}\n            }), 'baseTexture'\n        );\n        finalPass.needsSwap = true;\n\n        return finalPass;\n    }\n\n    private darkenNonBloomed = (obj: any) => {\n        if (obj.isMesh && this.bloomLayer.test(obj.layers) === false) {\n            this.materials[obj.uuid] = obj.material;\n            obj.material = this.darkMaterial;\n        }\n    }\n\n    private restoreMaterial = (obj: any) => {\n        if (this.materials[obj.uuid]) {\n            obj.material = this.materials[obj.uuid];\n            delete this.materials[obj.uuid];\n        }\n    }\n\n    \n    private getFragmentShader = () => {\n        return `\n            uniform sampler2D baseTexture;\n\t\t\tuniform sampler2D bloomTexture;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\t\t\t\tgl_FragColor = (texture2D(baseTexture, vUv) + vec4(1.0) * texture2D(bloomTexture, vUv));\n\t\t\t}\n        `\n    }\n\n    private getVertexShader = () => {\n        return `\n            varying vec2 vUv;\n\n            void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }\n        `\n    }\n}","import { CatmullRomCurve3, Object3D, TextureLoader, Vector3 } from \"three\";\nimport { AbstractGraphic } from \"./Abstract.graphic\";\nimport * as THREE from \"three\";\n\nexport interface TrackTrajectory {\n    curve: CatmullRomCurve3;\n    lengthSegment: number;\n    widthSegment: number;\n}\n\nexport class TrackGraphic extends AbstractGraphic {\n    private trajectory!: Vector3[];\n    private textureLoad!: TextureLoader;\n    private mesh!: THREE.Mesh;\n\n    private leftRailTrack: THREE.Vector3[] = [];\n    private rightRailTrack: THREE.Vector3[] = [];\n\n    constructor(trajectory: Vector3[]) {\n        super();\n        console.log('trajectory', trajectory);\n        this.textureLoad = new TextureLoader();\n        this.trajectory = trajectory;\n\n        const curve = new THREE.CatmullRomCurve3(this.trajectory, true);\n        this.build(curve);\n        this.getNode().add(this.mesh);\n\n    }\n\n    private readonly build = (curve: CatmullRomCurve3) => {\n        const geometry = this.createGeometry(curve);\n        const material = this.createMaterial(curve);\n        this.mesh = new THREE.Mesh(geometry, material);\n        this.buildSideTracks();\n    }\n\n    private buildSideTracks = () => {\n        const width = 0.1;\n        const height = 0.05;\n        const material = new THREE.MeshStandardMaterial({\n            color: new THREE.Color(0xd3d3d3),\n            side: THREE.DoubleSide\n        });\n\n        const sideGeometry = this.createSideGeometry(height, width, this.leftRailTrack);\n        const sideMesh = new THREE.Mesh(sideGeometry, material);\n        this.getNode().add(sideMesh);\n\n        const sideGeometry2 = this.createSideGeometry(height, width, this.rightRailTrack);\n        const sideMesh2 = new THREE.Mesh(sideGeometry2, material);\n        this.getNode().add(sideMesh2);\n    }\n\n    private createSideGeometry = (length: number, width: number, points: THREE.Vector3[]) => {\n        const shape = new THREE.Shape();\n        shape.moveTo(0, 0);\n        shape.lineTo(0, width);\n        shape.lineTo(length, width);\n        shape.lineTo(length, 0);\n        shape.lineTo(0, 0);\n\n        const curve = new CatmullRomCurve3(points);\n        const flowSteps = Math.round(Math.round(curve.getLength()) * 2);\n        return new THREE.ExtrudeGeometry(shape, {\n            steps: flowSteps,\n            curveSegments: flowSteps,\n            bevelEnabled: false,\n            depth: length,\n            extrudePath: curve\n        });\n    }\n\n    private createMaterial = (curve: CatmullRomCurve3) => {\n        const texture = this.textureLoad.load('assets/train_track.png');\n        texture.wrapS = THREE.RepeatWrapping;\n        texture.wrapT = THREE.RepeatWrapping;\n        texture.repeat.set(curve.getLength() * 2, 2);\n\n        const material = [\n            new THREE.MeshBasicMaterial({ color: 0xd3d3d3, side: THREE.DoubleSide }),\n            new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide }),\n            new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide }),\n            new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide }),\n            new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide }),\n            new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide }),\n            new THREE.MeshBasicMaterial({ color: 0xd3d3d3, side: THREE.DoubleSide }),\n        ];\n        return material;\n    }\n\n    private foo = (curve: CatmullRomCurve3, ls: number) => {\n        const lss = ls + 1;\n\n        let tangent;\n        const normal = new THREE.Vector3();\n        const binormal = new THREE.Vector3(0, 0, 1);\n\n        const t = []; // tangents\n        const n = []; // normals\n        const b = []; // binormals\n\n        for (let j = 0; j < lss; j++) {\n            // to the points\n            tangent = curve.getTangent(j / ls);\n            t.push(tangent.clone());\n\n            normal.crossVectors(tangent, binormal);\n            normal.z = 0; // to prevent lateral slope of the road\n            normal.normalize();\n            n.push(normal.clone());\n\n            binormal.crossVectors(normal, tangent); // new binormal\n            b.push(binormal.clone());\n        }\n\n        return {\n            tangents: t, \n            normals: n, \n            binormals: b\n        }\n    }\n\n    private calculateVertices = (vertices: Float32Array, trajectory: TrackTrajectory) => {\n        const {\n            tangents,\n            normals,\n            binormals\n        } = this.foo(trajectory.curve, trajectory.lengthSegment);\n\n        let x, y, z;\n        let posIdx = 0; // position index\n        const points = trajectory.curve.getPoints(trajectory.lengthSegment);\n        const lss = trajectory.lengthSegment + 1;\n        const wss = trajectory.widthSegment + 1;\n        const dw = [-1, -0.55, -0.45, -0.35, 0.35, 0.45, 0.55, 1]; // width from the center line\n\n        for (let j = 0; j < lss; j++) {  // length\n            for (let i = 0; i < wss; i++) { // width\n                x = points[j].x + dw[i] * normals[j].x;\n                z = points[j].z;\n                y = points[j].y + dw[i] * normals[j].y;\n\n                vertices[posIdx] = x;\n                vertices[posIdx + 1] = y;\n                vertices[posIdx + 2] = z;\n\n                posIdx += 3;\n\n                if (i === 3) {\n                    this.leftRailTrack.push(new THREE.Vector3(x, y, z));\n                }\n\n                if (i === 5) {\n                    this.rightRailTrack.push(new THREE.Vector3(x, y, z));\n                }\n            }\n        }\n    }\n\n    private calculateUVs = (uvs: Float32Array, trajectory: TrackTrajectory) => {\n        const lss = trajectory.lengthSegment + 1;\n        const wss = trajectory.widthSegment + 1;\n        const len = trajectory.curve.getLength();\n        const lenList = trajectory.curve.getLengths(trajectory.lengthSegment);\n        let uvIdxCount = 0;\n\n        for (let j = 0; j < lss; j++) {\n            for (let i = 0; i < wss; i++) {\n                uvs[uvIdxCount] = lenList[j] / len;\n                uvs[uvIdxCount + 1] = i / trajectory.widthSegment;\n\n                uvIdxCount += 2;\n            }\n        }\n    }\n\n\n    private createGeometry = (curve: CatmullRomCurve3) => {\n        const flowSteps = Math.round(Math.round(curve.getLength()) * 2);\n        const ls = flowSteps; // length segments\n        const ws = 7; // width segments \n        const lss = ls + 1;\n        const wss = ws + 1;\n        const trajectory = { curve, lengthSegment: ls, widthSegment: ws };\n\n        const faceCount = ls * ws * 2;\n        const vertexCount = lss * wss;\n\n        const indices = new Uint32Array(faceCount * 3);\n        const vertices = new Float32Array(vertexCount * 3);\n        const uvs = new Float32Array(vertexCount * 2);\n\n        const geometry = new THREE.BufferGeometry();\n        geometry.setIndex(new THREE.BufferAttribute(indices, 1));\n        \n\n        let idxCount = 0;\n        let a, b1, c1, c2;\n\n        for (let j = 0; j < ls; j++) {\n            for (let i = 0; i < ws; i++) {\n                // 2 faces / segment,  3 vertex indices\n                a = wss * j + i;\n                b1 = wss * (j + 1) + i;\t\t// right-bottom\n                c1 = wss * (j + 1) + 1 + i;\n                //  b2 = c1\t\t\t\t\t\t\t// left-top\n                c2 = wss * j + 1 + i;\n\n                indices[idxCount] = a; // right-bottom\n                indices[idxCount + 1] = b1;\n                indices[idxCount + 2] = c1;\n\n                indices[idxCount + 3] = a; // left-top\n                indices[idxCount + 4] = c1 // = b2,\n                indices[idxCount + 5] = c2;\n\n                geometry.addGroup(idxCount, 6, i); // write group for multi material\n                idxCount += 6;\n            }\n        }\n\n        this.calculateUVs(uvs, trajectory);\n        this.calculateVertices(vertices, trajectory);\n\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n        geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));\n\n        return geometry;\n    }\n}","\nexport const FRESNELSHADER = {\n  vertexShader: `\n      varying vec3 vPositionW;\n      varying vec3 vNormalW;\n  \n      void main() {\n\n          vPositionW = vec3( vec4( position, 1.0 ) * modelMatrix);\n          vNormalW = normalize( vec3( vec4( normal, 0.0 ) * modelMatrix ) );\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n      }\n\n  `,\n  fragmentShader: `\n      varying vec3 vPositionW;\n      varying vec3 vNormalW;\n      uniform vec3 color;\n      uniform float u_opacity;\n  \n      void main() {\n      \n          vec3 viewDirectionW = normalize(cameraPosition - vPositionW);\n          float fresnelTerm = dot(viewDirectionW, vNormalW);\n          fresnelTerm = clamp(1.0 - fresnelTerm, 0., 1.);\n\n          gl_FragColor = vec4( color * fresnelTerm, u_opacity);\n      }\n  `\n};\n","import { ElementRef } from \"@angular/core\";\nimport { Vector3 } from \"three\";\nimport { GangZGraphic } from \"../core/graphics/GangZ.graphic\";\nimport { TrackGraphic } from \"../core/graphics/Track.graphic\";\nimport { TunnelGraphic } from \"../core/graphics/Tunnel.graphic\";\nimport { IViewer } from \"../core/interfaces/IViewer\";\nimport { ViewerFactory } from \"../core/ViewerFactory\";\nimport { IGangZData, ITunnelDesc } from \"../data/interfaces/IMockData\";\n\nexport class EngineCommon {\n    private static readonly factoryViewer: ViewerFactory = new ViewerFactory();\n\n    public static createViewer = (canvasElement: ElementRef<HTMLCanvasElement>): Promise<IViewer> => {\n        return EngineCommon.factoryViewer.createViewer(canvasElement.nativeElement.id);\n    };\n\n    public static createTrack = (trajectory: Vector3[]) => {\n        return new TrackGraphic(trajectory);\n    };\n\n    public static createTunnel = (parameters: ITunnelDesc, trajectory: Vector3[]) => {\n        return new TunnelGraphic(parameters, trajectory);\n    };\n\n    public static createGangZ = (parameters: IGangZData) => {\n        return new GangZGraphic(parameters);\n    };\n}","import { AbstractGraphic } from \"./Abstract.graphic\";\nimport * as THREE from \"three\";\nimport { CatmullRomCurve3, Object3D, Vector3 } from \"three\";\nimport { ITunnelDesc } from \"src/app/data/interfaces/IMockData\";\nimport { FRESNELSHADER } from \"./interfaces/IFresnelShader\";\nimport { IPropertyChangeListener } from \"src/app/data/interfaces/IPropertyChangeListener\";\nimport { IStyle } from \"src/app/data/interfaces/IStyle\";\nimport { Style } from \"src/app/data/Style\";\n\nexport class TunnelGraphic extends AbstractGraphic implements IPropertyChangeListener {\n    public IPropertyChangeListener = 'TunnelGraphic';\n\n    private tunnel!: any;\n    private style!: IStyle;\n    private zFactor = 0.55;\n\n    constructor(parameters: ITunnelDesc, trajectory: Vector3[]) {\n        super();\n        this.setStyle();\n        const curve3 = new THREE.CatmullRomCurve3(trajectory);\n        this.build(parameters, curve3);\n        this.getNode().add(this.tunnel);\n    }\n\n    private readonly setStyle = () => {\n        this.style = new Style();\n        this.style.addPropertyChangeListener(this);\n    }\n\n    public getStyle(): IStyle {\n        return this.style;\n    }\n\n    public onPropertyChange(property: string, oldValue: any, newValue: any, object: any): void | Promise<void> {\n        \n    }\n\n    private build = (parameters: ITunnelDesc, curve: CatmullRomCurve3) => {\n        const tunnelCurve = this.extractCurve(curve, parameters.startAt, parameters.length);\n        const material = this.createMaterial(parameters.settings || {});\n        const geometry = this.createGeometry(parameters.bodyOD, parameters.bodyID, parameters.length, tunnelCurve);\n        const tunnel = new THREE.Mesh(geometry, material);\n        tunnel.translateZ(-this.zFactor);\n\n        this.tunnel = tunnel;\n\n        this.buildOuterBox(tunnelCurve, parameters.bodyOD, parameters.settings || {});\n    }\n\n    private buildOuterBox = (tunnelCurve: CatmullRomCurve3, outerRadius: number, settings: any) => {\n        const material = new THREE.MeshStandardMaterial({\n            color: Number(settings.color) || new THREE.Color(0xd3d3d3),\n            side: THREE.DoubleSide,\n            transparent: settings.opacity < 1,\n            opacity: settings.opacity\n        });\n\n        const sideGeometry = this.createBoxGeometry(tunnelCurve, outerRadius, settings.isIsometricMode);\n        const sideMesh = new THREE.Mesh(sideGeometry, material);\n        this.getNode().add(sideMesh);\n    }\n\n    private createBoxGeometry = (curve: CatmullRomCurve3, outerRadius: number, isIsometricMode: boolean = false) => {\n        const width = 6 * outerRadius;\n        const length = outerRadius + 3;\n        const buildShape = isIsometricMode ? this.buildIsometricShape : this.buildNormalShape;\n        const shape = buildShape(length, width, outerRadius);\n        const flowSteps = Math.round(Math.round(curve.getLength()) * 3);\n\n        return new THREE.ExtrudeGeometry(shape, {\n            steps: flowSteps,\n            curveSegments: flowSteps,\n            bevelEnabled: false,\n            extrudePath: curve\n        });\n    }\n\n    private buildNormalShape = (length: number, width: number, outerRadius: number) => {\n        const start = length / 2;\n        const end = width / 2;\n        const sAngle = THREE.MathUtils.degToRad(-120);\n        const eAngle = THREE.MathUtils.degToRad(120);\n\n        const hole = new THREE.Path();\n        hole.absarc(this.zFactor, 0, outerRadius, sAngle, eAngle, false);\n\n        const shape = new THREE.Shape();\n        shape.moveTo(-start + this.zFactor, -end);\n        shape.lineTo(-start + this.zFactor, end);\n        shape.lineTo(start + this.zFactor, end);\n        shape.lineTo(start + this.zFactor, -end);\n        shape.lineTo(-start + this.zFactor, -end);\n\n        shape.holes.push(hole);\n\n        return shape;\n    }\n    \n    private buildIsometricShape = (length: number, width: number, outerRadius: number) => {\n        const start = length / 2;\n        const end = width / 2;\n        const sAngle = THREE.MathUtils.degToRad(-120);\n        const eAngle = THREE.MathUtils.degToRad(120);\n\n        const shape = new THREE.Shape();\n        shape.moveTo(-start + this.zFactor, -end);\n        shape.lineTo(-start + this.zFactor, end);\n        shape.lineTo(this.zFactor, end);\n\n        // Draw part of circle\n        shape.lineTo(this.zFactor, 0 + outerRadius);\n        shape.absarc(this.zFactor, 0, outerRadius, Math.PI / 2, eAngle, false);\n        shape.absarc(this.zFactor, 0, outerRadius, sAngle, 0, false);\n        shape.moveTo(this.zFactor + outerRadius, 0);\n\n        shape.lineTo(start + this.zFactor, 0);\n        shape.lineTo(start + this.zFactor, -end);\n        shape.lineTo(-start + this.zFactor, -end);\n\n        return shape;\n    } \n\n    private extractCurve = (curve: CatmullRomCurve3, start: number, length: number) => {\n        const childCurve = [];\n        const sumLength = curve.getLength();\n        const end = start + length;\n        let i = start;\n\n        while (i < end) {\n            const p = curve.getPointAt(i / sumLength);\n            childCurve.push(p);\n            i += 0.05;\n        }\n\n        return new THREE.CatmullRomCurve3(childCurve);\n    }\n\n    private createGeometry = (outerRadius: number, innerRadius: number, length: number, curve: CatmullRomCurve3) => {\n        const sAngle = THREE.MathUtils.degToRad(-120);\n        const eAngle = THREE.MathUtils.degToRad(120);\n\n        const shape = new THREE.Shape();\n\n        shape.absarc(0, 0, outerRadius, sAngle, eAngle, false);\n        shape.absarc(0, 0, innerRadius, eAngle, sAngle, true);\n\n        const flowSteps = Math.round(Math.round(curve.getLength()) * 2);\n        return new THREE.ExtrudeGeometry(shape, {\n            steps: flowSteps,\n            curveSegments: flowSteps,\n            bevelEnabled: false,\n            extrudePath: curve\n        });\n    }\n\n    private createMaterial = (settings: any) => {\n        const color = Number(settings.tunnelColor) || 0x8B4513;\n        return new THREE.MeshStandardMaterial({\n            color: new THREE.Color(color),\n            side: THREE.DoubleSide\n        });\n    }\n\n    private createFresnelMaterial = () => {\n        const uniform = {\n            color: {\n              type: \"c\",\n              value: this.style.getColor(),\n            },\n            u_opacity: { value: this.style.getOpacity() }\n          }\n          return new THREE.ShaderMaterial({\n            uniforms: uniform,\n            vertexShader: FRESNELSHADER.vertexShader,\n            fragmentShader: FRESNELSHADER.fragmentShader,\n            transparent: this.style.getOpacity() < 1\n          });\n    }\n}","import { AbstractGraphic } from \"./Abstract.graphic\";\nimport * as THREE from \"three\";\nimport { CatmullRomCurve3, Object3D, Vector3 } from \"three\";\nimport { IGangZData } from \"src/app/data/interfaces/IMockData\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\nimport { MTLLoader } from \"three/examples/jsm/loaders/MTLLoader\";\nimport { IView } from \"../interfaces/IView\";\n\nexport class GangZGraphic extends AbstractGraphic {\n    private gangzMesh!: any;\n    private gangs!: Object3D[];\n    private mttlloader = new MTLLoader();\n    private dataAdapter: IGangZData;\n    private timer = 0;\n\n    constructor(params: IGangZData) {\n        super();\n        this.dataAdapter = params;\n        this.loadGangZ(params);\n    }\n\n    drawBegin(view: IView): void {\n        this.timer += Math.PI / 150;\n        if (this.gangzMesh) {\n            this.move();\n        }\n    }\n\n    private move = () => {\n        for (let i = 0; i < this.dataAdapter.count; i++) {\n            const dummy = this.gangs[i] as Object3D;\n\n            const position = this.dataAdapter.data.position || { x: 0, y: 0, z: 0 };\n            const range = this.dataAdapter.data.range || { x: 0, y: 0, z: 0 };\n\n            dummy.rotation.z = this.timer + Math.PI * this.dataAdapter.rotation.z;\n            dummy.position.z += 0.05 * Math.random() * Math.cos(this.timer);\n            dummy.position.y = range.y * Math.cos(this.timer) + position.y + i / 20;\n            dummy.position.x = range.x * Math.sin(this.timer) + position.x - i / 30;\n\n            dummy.updateMatrix();\n            this.gangzMesh.setMatrixAt(i, dummy.matrix);\n        }\n        this.gangzMesh.instanceMatrix.needsUpdate = true;\n    }\n\n    private loadGangZ = (params: IGangZData) => {\n        this.mttlloader.load(params.mtlPath || '', (materials) => {\n            materials.preload();\n\n            const objLoader = new OBJLoader();\n            objLoader.setMaterials(materials);\n            // objLoader.setPath('obj/male02/');\n\n            objLoader.load(params.objPath, (model) => {\n                const loadedMesh = model.children[0] as THREE.Mesh;\n                const mesh = new THREE.InstancedMesh(loadedMesh.geometry, loadedMesh.material, params.count || 10);\n                mesh.instanceMatrix.setUsage(THREE.DynamicDrawUsage);\n                this.getNode().add(mesh);\n                this.gangs = [];\n\n                for (let i = 0; i < params.count; i++) {\n                    const dummy = new THREE.Object3D();\n\n                    // dummy.position.set(30 +  Math.random(), -15 + Math.random() * 2, 0 + Math.random());\n                    dummy.position.set(0 + Math.random(), -0 + Math.random() * 2, -2 + Math.random());\n                    dummy.scale.set(params.scale, params.scale, params.scale);\n                    dummy.rotateX(Math.PI);\n                    dummy.rotateZ(Math.PI * params.rotation.z + Math.PI / 3 * Math.random());\n\n                    dummy.updateMatrix();\n                    mesh.setMatrixAt(i, dummy.matrix);\n                    this.gangs.push(dummy);\n                }\n\n                this.gangzMesh = mesh;\n            });\n        });\n    }\n}","import { IViewer } from \"./interfaces/IViewer\";\nimport { Viewer } from \"./Viewer\";\n\nexport class ViewerFactory {\n    private viewer!: IViewer;\n\n    constructor() { }\n\n    public async createViewer(htmlElemId: string): Promise<IViewer> {\n        this.viewer = new Viewer(htmlElemId);\n        return this.viewer;\n    }\n}","import { IView } from \"./interfaces/IView\";\nimport { IViewer } from \"./interfaces/IViewer\";\nimport { IWorld } from \"./interfaces/IWorld\";\nimport { View } from \"./View\";\nimport { World } from \"./World\";\n\nexport class Viewer implements IViewer {\n    IViewer: string = 'IView';\n\n    private view: IView;\n    private world: IWorld;\n    private animationRequestID: number = -1;\n\n    constructor(canvas: string) {\n        this.view = new View(canvas);\n        this.world = new World(this);\n        this.view.setWorld(this.world);\n        this.view.reset();\n\n        this.mainLoop();\n    }\n\n    getView(): IView {\n        return this.view;\n    }\n\n    getWorld(): IWorld {\n        return this.world;\n    }\n\n    private mainLoop = () => {\n        // repaint the ViewCanvas when it's View is dirty\n        if (this.view.isDirty()) {\n        }\n        this.view.render();\n\n        // tells the browser to schedule a next iteration\n        this.animationRequestID = requestAnimationFrame(this.mainLoop);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { AbstractGraphic } from \"./Abstract.graphic\";\nimport * as THREE from \"three\";\nimport { IView } from \"../interfaces/IView\";\n\nexport class SkyBoxGraphic extends AbstractGraphic {\n    private mesh!: THREE.Mesh;\n    private sun!: THREE.Mesh;\n    private timer = 0;\n\n    constructor(skyboxImage: string, size = 500) {\n        super();\n        this.buildCube(skyboxImage, size);\n        this.buildSun();\n    }\n\n    drawBegin(view: IView): void {\n        this.timer += Math.PI / 20;\n        this.mesh.rotation.x += 0.001;\n        this.mesh.rotation.y += 0.001;\n    }\n\n    private buildCube = (skyboxImage: string, size = 1000) => {\n        const materialArray = this.createMaterialArray(skyboxImage);\n        const skyboxGeo = new THREE.BoxGeometry(size, size, size);\n        this.mesh = new THREE.Mesh(skyboxGeo, materialArray);\n\n        this.turnOnGlowing(this.mesh);\n        this.getNode().add(this.mesh);\n    }\n\n    private buildSun = () => {\n        const color = new THREE.Color(\"#FDB813\");\n        const geometry = new THREE.IcosahedronGeometry(5, 15);\n        const material = new THREE.MeshBasicMaterial({ color: color });\n        this.sun = new THREE.Mesh(geometry, material);\n        this.sun.position.set(10, -5, -10);\n\n        this.turnOnGlowing(this.sun);\n        this.getNode().add(this.sun);\n    }\n\n    private createMaterialArray = (filename: string) => {\n        const skyboxImagepaths = this.createPathStrings(filename);\n        const materialArray = skyboxImagepaths.map((image: string) => {\n            let texture = new THREE.TextureLoader().load(image);\n            return new THREE.MeshBasicMaterial({ map: texture, side: THREE.BackSide });\n        });\n        return materialArray;\n    }\n\n    private createPathStrings = (filename: string) => {\n        const baseFilename = \"assets/skybox/\" + filename + '/' + filename;\n        const fileType = \".png\";\n        const sides = [\"ft\", \"bk\", \"up\", \"dn\", \"rt\", \"lf\"];\n\n        return sides.map(side => {\n            return baseFilename + \"_\" + side + fileType;\n        });\n    }\n}","import { Object3D } from \"three\";\nimport { IGraphic } from \"./interfaces/IGraphic\";\nimport { IGroup } from \"./interfaces/IGroup\";\n\nexport class MainGroup implements IGroup {\n    IGroup: string = 'MainGroup';\n\n    private group!: Object3D;\n    private children: IGraphic[] = [];\n    private pickableList: IGraphic[] = [];\n\n\n    constructor() {\n        this.group = new Object3D();\n        this.group.rotateX(Math.PI / 2);\n    }\n\n    getPickableNodes(): IGraphic[] {\n        return this.pickableList;\n    }\n\n    getChildNodes(): IGraphic[] {\n        return this.children;\n    }\n\n    addNode(node: IGraphic) {\n        this.group.add(node.getNode());\n        this.children.push(node);\n        if (node.isPickable()) {\n            this.pickableList.push(node);\n        }\n    }\n\n    setScene(scene: THREE.Scene) {\n        scene.add(this.group);\n    }\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { AbstractGraphic } from \"./Abstract.graphic\";\nimport * as THREE from \"three\";\nimport { IView } from \"../interfaces/IView\";\n\nexport class GalaxyGraphic extends AbstractGraphic {\n    private timer = 0;\n    private particlesMesh!: THREE.Points;\n    private galaxy = new THREE.Object3D();\n    private starMesh!: THREE.InstancedMesh;\n    private stars: THREE.Object3D[] = [];\n    private starVelocities: number[] = [];\n\n    constructor(size = 500) {\n        super();\n        this.buildParticles();\n        this.buildShootStars();\n    }\n\n    drawBegin(view: IView): void {\n        this.timer += Math.PI / 20000;\n\n        this.animateGalaxy();\n        this.animateShootStars();        \n    }\n\n    private animateGalaxy = () => {\n        if (this.galaxy) {\n            this.galaxy.rotateOnAxis(new THREE.Vector3(0, 0, 1), -0.005);\n        }\n    }\n\n    private animateShootStars = () => {\n        if (this.stars) {\n            this.stars.forEach((star: THREE.Object3D, i: number) => {\n                star.position.y += this.starVelocities[i];\n    \n                if (star.position.y > 50) {\n                    star.position.y = -70 + (Math.random() - 0.5) * 50;\n                }\n\n                star.updateMatrix();\n                this.starMesh.setMatrixAt(i, star.matrix);\n            });\n\n            this.starMesh.instanceMatrix.needsUpdate = true;\n        }\n    }\n\n    private buildGradientMaterial = (startcolor = 'white', endColor = 'black') => {\n        return new THREE.ShaderMaterial({\n            uniforms: {\n                color1: {\n                    value: new THREE.Color(endColor)\n                },\n                color2: {\n                    value: new THREE.Color(startcolor)\n                }\n            },\n            vertexShader: `\n              varying vec2 vUv;\n\n              void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * instanceMatrix * vec4(position,1.0);\n              }\n            `,\n            fragmentShader: `\n              uniform vec3 color1;\n              uniform vec3 color2;\n              \n              varying vec2 vUv;\n              \n              void main() {\n                gl_FragColor = vec4(mix(color1, color2, vUv.y), 1.0);\n              }\n            `,\n        });\n    }\n\n    private buildShootStars = (count = 30) => {\n        const geometry = new THREE.CylinderGeometry(0.1, 0.01, 10);\n        const material = this.buildGradientMaterial();\n\n        this.starMesh = new THREE.InstancedMesh(geometry, material, count);\n        this.starMesh.instanceMatrix.setUsage(THREE.DynamicDrawUsage);\n        this.getNode().add(this.starMesh);\n        this.stars = [];\n        this.starVelocities = [];\n\n        for (let i = 0; i < count; i++) {\n            const dummy = new THREE.Object3D();\n            this.starVelocities.push(Math.random() * 1.5 + 1);\n\n            dummy.position.set(50 + Math.random() * 20, -70 + (Math.random() - 0.5) * 50, -1 + Math.random() * 10);\n            dummy.scale.y = Math.random() + 1;\n            dummy.scale.x = Math.random() * 2 + 1;\n            dummy.scale.z =  dummy.scale.x;\n            dummy.updateMatrix();\n\n            this.starMesh.setMatrixAt(i, dummy.matrix);\n            this.stars.push(dummy);\n        }\n    }\n\n    private buildParticles = () => {\n\n        const { posArray, colorArray } = this.buildGalaxyGeometry();\n        const particlesGeometry = new THREE.BufferGeometry();\n        particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n        particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colorArray, 3));\n\n        const particlesMaterial = new THREE.PointsMaterial({\n            size: 0.05,\n            // color: '#6cf6fe' //#2aa7d8\n            vertexColors: true\n        });\n\n        this.particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n\n        this.galaxy.position.set(-5, -10, -5);\n        this.galaxy.add(this.particlesMesh);\n\n        this.getNode().add(this.galaxy);\n    }\n\n    private buildGalaxyGeometry = () => {\n        const count = 20000;\n        const a = 0.1;\n        const b = 0.17;\n        const windings = 4.7; // radius\n        const tMax = 2.0 * Math.PI * windings;\n        const drift = 0.3; // density \n\n        const posArray = new Float32Array(count * 3);\n        const colorArray = new Float32Array(count * 3);\n        for (let i = 0; i < count * 3; i += 3) {\n\n            const t = tMax * Math.random();\n            let x = a * Math.exp(b * t) * Math.cos(t);\n            x = x + (drift * x * Math.random()) - (drift * x * Math.random());\n            let y = a * Math.exp(b * t) * Math.sin(t);\n            y = y + (drift * y * Math.random()) - (drift * y * Math.random());\n\n            const random = Math.random() > 0.5 ? 1 : -1;\n            posArray[i] = random * x;\n            posArray[i + 1] = random * y + 10;\n            posArray[i + 2] = 5 * (1 + Math.random() * drift - Math.random() * drift) + 12;\n\n            colorArray[i] = 0.2 + Math.random() / 3;\n            colorArray[i + 1] = Math.random() / 2;\n            colorArray[i + 2] = 0.7;\n        };\n\n        return {\n            posArray,\n            colorArray\n        };\n    }\n\n    private evenlySpiral1 = () => {\n        // const norm = Math.random() * 100;\n\n        //     // Random variation to theta [-0.5, 0.5]\n        //     const thetaVar = Math.random() * 0.5 - 0.5;\n\n        //     // Theta grows from 0 to Math.PI (+ random variation)\n        //     const theta = norm * Math.PI + thetaVar;\n\n        //     // Phi stays close to 0 to create galaxy ecliptic plane\n        //     const phi = Math.random() * 0.2 - 0.1;\n\n        //     // Distance grows from 0 to galaxySize\n        //     const distance = norm * galaxySize;\n\n        //     posArray[i] = distance * Math.sin(theta) * Math.cos(phi);\n        //     posArray[i + 1] = distance * Math.sin(theta) * Math.sin(phi);\n        //     posArray[i + 2] = distance * Math.cos(theta);\n    }\n}","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","import { Object3D, Event } from \"three\";\nimport { IGraphic } from \"../interfaces/IGraphic\";\nimport { IView } from \"../interfaces/IView\";\nimport * as THREE from \"three\";\n\nexport class AbstractGraphic implements IGraphic {\n    IGraphic: string = 'AbstractGraphic';\n\n    private dirty: boolean = false;\n    private pickable: boolean = false;\n    private readonly root: Object3D = new Object3D();\n\n    drawBegin(view: IView): void {\n\n    }\n\n    drawEnd(view: IView): void {\n\n    }\n\n    isDirty(): boolean {\n        return this.dirty;\n    }\n\n    isPickable(): boolean {\n        return this.pickable;\n    }\n\n    setDirty(value: boolean): void {\n        this.dirty = value;\n    }\n\n    setPickable(value: boolean): void {\n        this.pickable = value;\n    }\n\n    getNode(): Object3D<Event> {\n        return this.root;\n    }\n\n    setVisible(visible: boolean): void {\n        this.root.visible = visible;\n    }\n\n    getVisible(): boolean {\n        return this.root.visible;\n    }\n\n    turnOnGlowing(child: THREE.Mesh, level: number = 1): void {\n        child.layers.enable(level);\n    }\n}"],"sourceRoot":"webpack:///"}